<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://mhanckow.vm.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="C">
<imie_nazwisko>Marcin Jedynski</imie_nazwisko>
<nr_indeksu>416084</nr_indeksu>
<liczba_pkt> 5.5 </liczba_pkt>
<zadanie nr="41a" pkt="1"></zadanie>
<zadanie nr="41b" pkt="1"></zadanie>
<zadanie nr="42" pkt="1"></zadanie>
<zadanie nr="43" pkt="1"></zadanie>
<zadanie nr="44" pkt="1.5"></zadanie>


</sprawozdanie>


Zadanie 41a -------------------------------------

Klient (w jezyku Ruby):

#!/usr/bin/env ruby

require 'rubygems'
require 'ffi-rzmq'

context = ZMQ::Context.new(1)

response = ''
requester = context.socket(ZMQ::REQ)
requester.connect("tcp://localhost:5555")

subscriber = context.socket(ZMQ::SUB)
subscriber.connect("tcp://localhost:5556")

sender = context.socket(ZMQ::PUSH)
sender.connect("tcp://localhost:5558")

requester.send_string("request filter")
requester.recv_string(response)
subscriber.setsockopt(ZMQ::SUBSCRIBE, response)
sender.send_string('ready')

subscriber.recv_string(response)

puts response


Serwer (w jezyku Ruby):

#!/usr/bin/env ruby

require 'rubygems'
require 'ffi-rzmq'

message = "ala ma kota"
filter = 'test'
request=''

context = ZMQ::Context.new(1)


socket = context.socket(ZMQ::REP)
socket.bind("tcp://*:5555")

receiver = context.socket(ZMQ::PULL)
receiver.bind("tcp://*:5558")

publisher = context.socket(ZMQ::PUB)
publisher.bind("tcp://*:5556")

socket.recv_string(request)
if request == 'request filter'
    socket.send_string(filter)
end

receiver.recv_string(request)
if request == 'ready'
    publisher.send_string(filter +' '+message)
end

/// wydruk

PL-MAC-C02XR105JHD2:a mj$ ./client.rb
test ala ma kota

PL-MAC-C02XR105JHD2:a mj$ ./server.rb


Zadanie 41b -------------------------------------

Klient (w jezyku C):

// Compilation (requires zhelpers.h file available at https://github.com/booksbyus/zguide/blob/master/examples/C/zhelpers.h):
//  clang -Wall client.c -o client -lzmq
#include <zmq.h>
#include "zhelpers.h"

int main (void)
{
    char *ping;
    char *string;
    void *context = zmq_ctx_new ();
    void *requester = zmq_socket (context, ZMQ_REQ);
    printf ("Connecting to hello world server...\n");

    zmq_connect (requester, "tcp://localhost:5555");
    printf ("Sending Ping...\n");
    zmq_send (requester, "ping", 4, 0);
    string = s_recv (requester);
    printf ("Received %s\n", string);
    
    free(string);
    zmq_close (requester);
    zmq_ctx_destroy (context);
    return 0;
}


Serwer (w jezyku Ruby):

#!/usr/bin/env ruby

require 'rubygems'
require 'ffi-rzmq'

request = ''
pong = 'pong'

context = ZMQ::Context.new(1)


socket = context.socket(ZMQ::REP)
socket.bind("tcp://*:5555")
counter = 0

while true
    resp = "#{pong} #{counter}"
    socket.recv_string(request)
    socket.send_string(resp)
    counter += 1
end

/// wydruk

PL-MAC-C02XR105JHD2:b mj$ ./server.rb

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 0

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 1

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 2


Zadanie 42 -------------------------------------

Klient (w jez Ruby):

require 'Matrix'
require 'ffi-rzmq'

#wprowadzc macierz w formacie np Matrix[[4, 8], [12, 16]]

context = ZMQ::Context.new(1)
response = ZMQ::Message.create
requester = context.socket(ZMQ::REQ)
requester.connect("tcp://localhost:5555")
puts "Wprowadz macierz:"
matrix  = eval(gets())

puts "Wprowadz mnoznik:"
multiplier  = gets().to_i
request = ZMQ::Message.new(Marshal.dump(multiplier))
requester.sendmsg(request)
requester.recvmsg(response)

if Marshal.load(response.copy_out_string) == 'SET'
    request = ZMQ::Message.new(Marshal.dump(matrix))
    requester.sendmsg(request)
    requester.recvmsg(response)
    puts "zwr√≥cona macierz #{Marshal.load(response.copy_out_string)}"
else
    puts 'Something went wrong'
end

Serwer (napisany w jez Ruby):

require 'Matrix'
require 'ffi-rzmq'

context = ZMQ::Context.new(1)
request = ZMQ::Message.create
responder = context.socket(ZMQ::REP)
responder.bind("tcp://*:5555")

while true
    multiplier = 0

    responder.recvmsg(request)
    multiplier = Marshal.load(request.copy_out_string)
    puts "otrzymany mnoznik #{multiplier}"

    reply = ZMQ::Message.new(Marshal.dump("SET"))
    responder.sendmsg(reply)

    responder.recvmsg(request)
    matrix = Marshal.load(request.copy_out_string)
    puts "otrzymana macierz #{matrix}"
    matrix = matrix * multiplier

    reply = ZMQ::Message.new(Marshal.dump(matrix))
    responder.sendmsg(reply)
end


Zadanie 43 -------------------------------------

Klient:

#!/usr/bin/env ruby

require 'rubygems'
require 'ffi-rzmq'
id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REQ)
socket.connect('tcp://localhost:5559')

10.times do |request|
  string = "Hello #{request} (client id = %05i)" % id
  socket.send_string(string)
  puts "Sending string [#{string}]"
  socket.recv_string(message = '')
  puts "Received reply #{request}[#{message}]"
end


Broker:

#!/usr/bin/env ruby


require 'rubygems'
require 'ffi-rzmq'

context = ZMQ::Context.new

frontend = context.socket(ZMQ::ROUTER)
frontend.bind('tcp://*:5559')

backend = context.socket(ZMQ::DEALER)
backend.bind('tcp://*:5560')

poller = ZMQ::Device.new(frontend,backend)


Serwer:

#!/usr/bin/env ruby


require 'rubygems'
require 'ffi-rzmq'

id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REP)
socket.connect('tcp://localhost:5560')

loop do
  socket.recv_string(message = '')
  puts "Received request: #{message}"
  socket.send_string("World (worker id = %05i)" % id)
end

/// wydruk

PL-MAC-C02XR105JHD2:43 mj$ ruby msgqueue.rb

PL-MAC-C02XR105JHD2:43 mj$ ruby rrclient.rb
Sending string [Hello 0 (client id = 01626)]
Received reply 0[World (worker id = 07712)]
Sending string [Hello 1 (client id = 01626)]
Received reply 1[World (worker id = 04041)]
Sending string [Hello 2 (client id = 01626)]
Received reply 2[World (worker id = 07712)]
Sending string [Hello 3 (client id = 01626)]
Received reply 3[World (worker id = 04041)]
Sending string [Hello 4 (client id = 01626)]
Received reply 4[World (worker id = 07712)]
Sending string [Hello 5 (client id = 01626)]
Received reply 5[World (worker id = 04041)]
Sending string [Hello 6 (client id = 01626)]
Received reply 6[World (worker id = 07712)]
Sending string [Hello 7 (client id = 01626)]
Received reply 7[World (worker id = 04041)]
Sending string [Hello 8 (client id = 01626)]
Received reply 8[World (worker id = 07712)]
Sending string [Hello 9 (client id = 01626)]
Received reply 9[World (worker id = 04041)]

PL-MAC-C02XR105JHD2:43 mj$ ruby rrworker.rb
Received request: Hello 0 (client id = 01626)
Received request: Hello 2 (client id = 01626)
Received request: Hello 4 (client id = 01626)
Received request: Hello 6 (client id = 01626)
Received request: Hello 8 (client id = 01626)

L-MAC-C02XR105JHD2:43 mj$ ruby rrworker.rb
Received request: Hello 1 (client id = 01626)
Received request: Hello 3 (client id = 01626)
Received request: Hello 5 (client id = 01626)
Received request: Hello 7 (client id = 01626)
Received request: Hello 9 (client id = 01626)


Zadanie 44 -------------------------------------

Broker posiada identyczny kod jak w zadaniu 43.

Klient:

#!/usr/bin/env ruby

# author: Oleg Sidorov <4pcbr> i4pcbr@gmail.com
# this code is licenced under the MIT/X11 licence.

require 'rubygems'
require 'ffi-rzmq'
id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REQ)
socket.connect('tcp://localhost:5559')

string = "Generate random numbers (client id = %05i)" % id
socket.send_string(string)
puts "Sending string [#{string}]"
loop do
  socket.recv_string(message = '')
  puts "Received: #{message}"
  break if not socket.more_parts?
end


Serwer:

#!/usr/bin/env ruby

# author: Oleg Sidorov <4pcbr> i4pcbr@gmail.com
# this code is licenced under the MIT/X11 licence.

require 'rubygems'
require 'ffi-rzmq'

id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REP)
socket.connect('tcp://localhost:5560')

loop do
  socket.recv_string(message = '')
  puts "Received request: #{message}"
  number = rand(1..20)
  puts "Generating #{number} random numbers"

  for i in (1..number) do
    socket.send_string( "%i (worker id = %05i)" % [rand(1..10000), id], i == number ? 0 : ZMQ::SNDMORE )
  end
end



/// wydruk

PL-MAC-C02XR105JHD2:44 mj$ ruby msgqueue.rb


PL-MAC-C02XR105JHD2:44 mj$ ruby rrworker.rb
Received request: Generate random numbers (client id = 06199)
Generating 17 random numbers
Received request: Generate random numbers (client id = 01295)
Generating 12 random numbers


PL-MAC-C02XR105JHD2:44 mj$ ruby rrclient.rb
Sending string [Generate random numbers (client id = 06199)]
Received: 6274 (worker id = 03449)
Received: 3888 (worker id = 03449)
Received: 1862 (worker id = 03449)
Received: 4038 (worker id = 03449)
Received: 5856 (worker id = 03449)
Received: 5739 (worker id = 03449)
Received: 3692 (worker id = 03449)
Received: 9509 (worker id = 03449)
Received: 7657 (worker id = 03449)
Received: 9664 (worker id = 03449)
Received: 2144 (worker id = 03449)
Received: 3403 (worker id = 03449)
Received: 6507 (worker id = 03449)
Received: 5548 (worker id = 03449)
Received: 513 (worker id = 03449)
Received: 3725 (worker id = 03449)
Received: 5396 (worker id = 03449)
PL-MAC-C02XR105JHD2:44 mj$ ruby rrclient.rb
Sending string [Generate random numbers (client id = 01295)]
Received: 321 (worker id = 03449)
Received: 2230 (worker id = 03449)
Received: 1196 (worker id = 03449)
Received: 5901 (worker id = 03449)
Received: 5528 (worker id = 03449)
Received: 8477 (worker id = 03449)
Received: 9625 (worker id = 03449)
Received: 2060 (worker id = 03449)
Received: 1476 (worker id = 03449)
Received: 8040 (worker id = 03449)
Received: 8561 (worker id = 03449)
Received: 2912 (worker id = 03449)