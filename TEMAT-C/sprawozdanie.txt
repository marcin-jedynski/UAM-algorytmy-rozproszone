<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sprawozdanie PUBLIC "sprawozdanie" "http://mhanckow.vm.wmi.amu.edu.pl:20002/zajecia/file-storage/view/sprawozdanie.dtd">
<sprawozdanie przedmiot="ALR" temat="C">
<imie_nazwisko>Marcin Jedynski</imie_nazwisko>
<nr_indeksu>416084</nr_indeksu>
<liczba_pkt>10.5</liczba_pkt>
<zadanie nr="40" pkt="2.5"></zadanie>
<zadanie nr="41a" pkt="1"></zadanie>
<zadanie nr="41b" pkt="1"></zadanie>
<zadanie nr="42" pkt="1"></zadanie>
<zadanie nr="43" pkt="1"></zadanie>
<zadanie nr="44" pkt="1.5"></zadanie>
<zadanie nr="45" pkt="1"></zadanie>
<zadanie nr="46" pkt="1.5"></zadanie>



</sprawozdanie>

Zadanie 40 -------------------------------------
Instalacja:
Aby uruchomić zadania napisane w języku Ruby wystarczy posiadać intepreter Ruby w wersji =< 2.2
oraz wykonać polecenie 'gem install ffi-rzmq'.
Aby uruchmoić zadania napisane w języku Python wystarczy posiadać interpeter python w wersji =< 3.2
oraz wykonać polecenie 'pip3 install pyzmq'

Instrukcja:
Należy uruchomić najpierw brokera a następnie kilka nadajników.
Po uruchomieniu nadajnik pyta czy zacząć nadawać, wystarczy zatwierdzić enterem literę 'y'.
Nadajnik zacznie wypisywać na standardowe wyjśćie ilość sekund (wraz z mikrosekundami) od daty POSIX time.

Broker synchronizujacy nadajniki (napisanyw jezyku Ruby):

#!/usr/bin/env ruby

require 'ffi-rzmq'

response = ''
status_update = ''
clientCounter = 0
transsmissionCounter = 0
filter = 'clear'
statusHash = {}

context = ZMQ::Context.new(1)
listener = context.socket(ZMQ::REP)
commander = context.socket(ZMQ::PUB)
statuspoller = context.socket(ZMQ::PULL)
poller = context.socket(ZMQ::POLL)

listener.bind("tcp://*:5050")
commander.bind("tcp://*:5060")
statuspoller.bind("tcp://*:5070")

poller = ZMQ::Poller.new
poller.register(statuspoller, ZMQ::POLLIN)

while true

    listener.recv_string(response)
    if response.include?("clear channel")
        puts(response)
        id = response.split()[2]
        transsmissionCounter += 1
        statusHash[transsmissionCounter] = false
        if not transsmissionCounter == 1
            commander.send_string(filter + " " + transsmissionCounter.to_s + " " + id)
            loop do
                poller.poll(:blocking)
                poller.readables.each do |socket|
                  if socket === statuspoller
                    socket.recv_string(status_update)
                    if status_update.include?(transsmissionCounter.to_s) then statusHash[transsmissionCounter] = true end
                  end
                end
                if statusHash[transsmissionCounter] then break end
            end
        end
        listener.send_string("channel clear")
        puts("Transmission nr %d" % transsmissionCounter)
    elsif response == "register"
        clientCounter +=1 
        listener.send_string("registered")
    else
        listener.send_string("unknown request")
    end
end

Nadajnik (napisany w jezyku Ruby):

#!/usr/bin/env ruby

require 'ffi-rzmq'

$is_registered = false
$transmitting = false
filter = 'clear'
response = ''
status_update = ''
$random_id = "%04d" % rand(1..1000)
context = ZMQ::Context.new(1)
requester = context.socket(ZMQ::REQ)
orders = context.socket(ZMQ::SUB)
status = context.socket(ZMQ::PUSH)

requester.connect("tcp://localhost:5050")
status.connect("tcp://localhost:5070")
orders.setsockopt(ZMQ::SUBSCRIBE, filter)
orders.setsockopt(ZMQ::LINGER, 0)


poller = ZMQ::Poller.new
poller.register(orders, ZMQ::POLLIN)


def display()
    clear()
    puts("Node id: %s" % $random_id)
    puts ("Node registered: %s" % $is_registered)
    puts ("Node transmitting: %s" % $transmitting)
end

def getDecision()
    puts("Begin transmittion? 'y'/'n'")
    decision = gets().chomp()
    return decision
end

def clear()
    system "clear" or system "cls"
end

while true
    if  not $is_registered
        requester.send_string('register')
        requester.recv_string(response)
        if response == 'registered'
            $is_registered = true
            puts "Client now is registered"
        end
    else
        display()
        decision = getDecision()
        if decision == 'y'
            requester.send_string('clear channel' + ' ' + $random_id)
            puts("requesting channel")
            requester.recv_string(response)
            puts("request response: %s" % response)
            if response == 'channel clear'
                $transmitting = true
                status_update = ''
                display()
                orders.connect("tcp://localhost:5060")
                loop do
                    orders.recv_string(status_update, ZMQ::DONTWAIT)
                    if not status_update.empty? 
                        msg, transmission_counter, id = status_update.split()
                        if id != $random_id
                            $transmitting = false
                            status.send_string(transmission_counter)
                            display()
                            orders.disconnect("tcp://localhost:5060")
                            break
                        end
                    else
                        puts(Time.now.to_f)
                    end
                end
            end
        end
    end 
end


/// wydruk

PL-MAC-C02XR105JHD2:40 mj$ ruby hub.rb
clear channel 0455
Transmission nr 1
clear channel 0714
Transmission nr 2

Node id: 0133
Node registered: true
Node transmitting: false
Begin transmittion? 'y'/'n'

1547427680.08284
1547427680.082856
1547427680.082871
1547427680.082892
1547427680.082916




Zadanie 41a -------------------------------------

Klient (w jezyku Ruby):

#!/usr/bin/env ruby


require 'ffi-rzmq'

context = ZMQ::Context.new(1)

response = ''
requester = context.socket(ZMQ::REQ)
requester.connect("tcp://localhost:5555")

subscriber = context.socket(ZMQ::SUB)
subscriber.connect("tcp://localhost:5556")

sender = context.socket(ZMQ::PUSH)
sender.connect("tcp://localhost:5558")

requester.send_string("request filter")
requester.recv_string(response)
subscriber.setsockopt(ZMQ::SUBSCRIBE, response)
sender.send_string('ready')

subscriber.recv_string(response)

puts response


Serwer (w jezyku Ruby):

#!/usr/bin/env ruby


require 'ffi-rzmq'

message = "ala ma kota"
filter = 'test'
request=''

context = ZMQ::Context.new(1)


socket = context.socket(ZMQ::REP)
socket.bind("tcp://*:5555")

receiver = context.socket(ZMQ::PULL)
receiver.bind("tcp://*:5558")

publisher = context.socket(ZMQ::PUB)
publisher.bind("tcp://*:5556")

socket.recv_string(request)
if request == 'request filter'
    socket.send_string(filter)
end

receiver.recv_string(request)
if request == 'ready'
    publisher.send_string(filter +' '+message)
end

/// wydruk

PL-MAC-C02XR105JHD2:a mj$ ./client.rb
test ala ma kota

PL-MAC-C02XR105JHD2:a mj$ ./server.rb


Zadanie 41b -------------------------------------

Klient (w jezyku C):

// Compilation (requires zhelpers.h file available at https://github.com/booksbyus/zguide/blob/master/examples/C/zhelpers.h):
//  clang -Wall client.c -o client -lzmq
#include <zmq.h>
#include "zhelpers.h"

int main (void)
{
    char *ping;
    char *string;
    void *context = zmq_ctx_new ();
    void *requester = zmq_socket (context, ZMQ_REQ);
    printf ("Connecting to hello world server...\n");

    zmq_connect (requester, "tcp://localhost:5555");
    printf ("Sending Ping...\n");
    zmq_send (requester, "ping", 4, 0);
    string = s_recv (requester);
    printf ("Received %s\n", string);
    
    free(string);
    zmq_close (requester);
    zmq_ctx_destroy (context);
    return 0;
}


Serwer (w jezyku Ruby):

#!/usr/bin/env ruby


require 'ffi-rzmq'

request = ''
pong = 'pong'

context = ZMQ::Context.new(1)


socket = context.socket(ZMQ::REP)
socket.bind("tcp://*:5555")
counter = 0

while true
    resp = "#{pong} #{counter}"
    socket.recv_string(request)
    socket.send_string(resp)
    counter += 1
end

/// wydruk

PL-MAC-C02XR105JHD2:b mj$ ./server.rb

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 0

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 1

PL-MAC-C02XR105JHD2:b mj$ ./client
Connecting to hello world server...
Sending Ping...
Received pong 2


Zadanie 42 -------------------------------------

Klient (w jez Ruby):

require 'Matrix'
require 'ffi-rzmq'

#wprowadzc macierz w formacie np Matrix[[4, 8], [12, 16]]

context = ZMQ::Context.new(1)
response = ZMQ::Message.create
requester = context.socket(ZMQ::REQ)
requester.connect("tcp://localhost:5555")
puts "Wprowadz macierz:"
matrix  = eval(gets())

puts "Wprowadz mnoznik:"
multiplier  = gets().to_i
request = ZMQ::Message.new(Marshal.dump(multiplier))
requester.sendmsg(request)
requester.recvmsg(response)

if Marshal.load(response.copy_out_string) == 'SET'
    request = ZMQ::Message.new(Marshal.dump(matrix))
    requester.sendmsg(request)
    requester.recvmsg(response)
    puts "zwrócona macierz #{Marshal.load(response.copy_out_string)}"
else
    puts 'Something went wrong'
end

Serwer (napisany w jez Ruby):

require 'Matrix'
require 'ffi-rzmq'

context = ZMQ::Context.new(1)
request = ZMQ::Message.create
responder = context.socket(ZMQ::REP)
responder.bind("tcp://*:5555")

while true
    multiplier = 0

    responder.recvmsg(request)
    multiplier = Marshal.load(request.copy_out_string)
    puts "otrzymany mnoznik #{multiplier}"

    reply = ZMQ::Message.new(Marshal.dump("SET"))
    responder.sendmsg(reply)

    responder.recvmsg(request)
    matrix = Marshal.load(request.copy_out_string)
    puts "otrzymana macierz #{matrix}"
    matrix = matrix * multiplier

    reply = ZMQ::Message.new(Marshal.dump(matrix))
    responder.sendmsg(reply)
end


Zadanie 43 -------------------------------------

Klient:

#!/usr/bin/env ruby


require 'ffi-rzmq'
id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REQ)
socket.connect('tcp://localhost:5559')

10.times do |request|
  string = "Hello #{request} (client id = %05i)" % id
  socket.send_string(string)
  puts "Sending string [#{string}]"
  socket.recv_string(message = '')
  puts "Received reply #{request}[#{message}]"
end


Broker:

#!/usr/bin/env ruby



require 'ffi-rzmq'

context = ZMQ::Context.new

frontend = context.socket(ZMQ::ROUTER)
frontend.bind('tcp://*:5559')

backend = context.socket(ZMQ::DEALER)
backend.bind('tcp://*:5560')

poller = ZMQ::Device.new(frontend,backend)


Serwer:

#!/usr/bin/env ruby



require 'ffi-rzmq'

id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REP)
socket.connect('tcp://localhost:5560')

loop do
  socket.recv_string(message = '')
  puts "Received request: #{message}"
  socket.send_string("World (worker id = %05i)" % id)
end

/// wydruk

PL-MAC-C02XR105JHD2:43 mj$ ruby msgqueue.rb

PL-MAC-C02XR105JHD2:43 mj$ ruby rrclient.rb
Sending string [Hello 0 (client id = 01626)]
Received reply 0[World (worker id = 07712)]
Sending string [Hello 1 (client id = 01626)]
Received reply 1[World (worker id = 04041)]
Sending string [Hello 2 (client id = 01626)]
Received reply 2[World (worker id = 07712)]
Sending string [Hello 3 (client id = 01626)]
Received reply 3[World (worker id = 04041)]
Sending string [Hello 4 (client id = 01626)]
Received reply 4[World (worker id = 07712)]
Sending string [Hello 5 (client id = 01626)]
Received reply 5[World (worker id = 04041)]
Sending string [Hello 6 (client id = 01626)]
Received reply 6[World (worker id = 07712)]
Sending string [Hello 7 (client id = 01626)]
Received reply 7[World (worker id = 04041)]
Sending string [Hello 8 (client id = 01626)]
Received reply 8[World (worker id = 07712)]
Sending string [Hello 9 (client id = 01626)]
Received reply 9[World (worker id = 04041)]

PL-MAC-C02XR105JHD2:43 mj$ ruby rrworker.rb
Received request: Hello 0 (client id = 01626)
Received request: Hello 2 (client id = 01626)
Received request: Hello 4 (client id = 01626)
Received request: Hello 6 (client id = 01626)
Received request: Hello 8 (client id = 01626)

L-MAC-C02XR105JHD2:43 mj$ ruby rrworker.rb
Received request: Hello 1 (client id = 01626)
Received request: Hello 3 (client id = 01626)
Received request: Hello 5 (client id = 01626)
Received request: Hello 7 (client id = 01626)
Received request: Hello 9 (client id = 01626)


Zadanie 44 -------------------------------------

Broker posiada identyczny kod jak w zadaniu 43.

Klient:

#!/usr/bin/env ruby

# author: Oleg Sidorov <4pcbr> i4pcbr@gmail.com
# this code is licenced under the MIT/X11 licence.


require 'ffi-rzmq'
id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REQ)
socket.connect('tcp://localhost:5559')

string = "Generate random numbers (client id = %05i)" % id
socket.send_string(string)
puts "Sending string [#{string}]"
loop do
  socket.recv_string(message = '')
  puts "Received: #{message}"
  break if not socket.more_parts?
end


Serwer:

#!/usr/bin/env ruby

# author: Oleg Sidorov <4pcbr> i4pcbr@gmail.com
# this code is licenced under the MIT/X11 licence.


require 'ffi-rzmq'

id = rand(1..10000)
context = ZMQ::Context.new
socket = context.socket(ZMQ::REP)
socket.connect('tcp://localhost:5560')

loop do
  socket.recv_string(message = '')
  puts "Received request: #{message}"
  number = rand(1..20)
  puts "Generating #{number} random numbers"

  for i in (1..number) do
    socket.send_string( "%i (worker id = %05i)" % [rand(1..10000), id], i == number ? 0 : ZMQ::SNDMORE )
  end
end



/// wydruk

PL-MAC-C02XR105JHD2:44 mj$ ruby msgqueue.rb


PL-MAC-C02XR105JHD2:44 mj$ ruby rrworker.rb
Received request: Generate random numbers (client id = 06199)
Generating 17 random numbers
Received request: Generate random numbers (client id = 01295)
Generating 12 random numbers


PL-MAC-C02XR105JHD2:44 mj$ ruby rrclient.rb
Sending string [Generate random numbers (client id = 06199)]
Received: 6274 (worker id = 03449)
Received: 3888 (worker id = 03449)
Received: 1862 (worker id = 03449)
Received: 4038 (worker id = 03449)
Received: 5856 (worker id = 03449)
Received: 5739 (worker id = 03449)
Received: 3692 (worker id = 03449)
Received: 9509 (worker id = 03449)
Received: 7657 (worker id = 03449)
Received: 9664 (worker id = 03449)
Received: 2144 (worker id = 03449)
Received: 3403 (worker id = 03449)
Received: 6507 (worker id = 03449)
Received: 5548 (worker id = 03449)
Received: 513 (worker id = 03449)
Received: 3725 (worker id = 03449)
Received: 5396 (worker id = 03449)
PL-MAC-C02XR105JHD2:44 mj$ ruby rrclient.rb
Sending string [Generate random numbers (client id = 01295)]
Received: 321 (worker id = 03449)
Received: 2230 (worker id = 03449)
Received: 1196 (worker id = 03449)
Received: 5901 (worker id = 03449)
Received: 5528 (worker id = 03449)
Received: 8477 (worker id = 03449)
Received: 9625 (worker id = 03449)
Received: 2060 (worker id = 03449)
Received: 1476 (worker id = 03449)
Received: 8040 (worker id = 03449)
Received: 8561 (worker id = 03449)
Received: 2912 (worker id = 03449)

Zadanie 45 -------------------------------------

Zabezpieczenia typu PLAIN korzystają z nieszyfrowanego połaczenia,
uwierzytelnianie jest wykonywane za pomocą loginu + hasła które można podejrzeć jeśli ktoś przechwytuje ruch sieciowy.
Jeśli uwierzytelnianie się powiedzie to zostaje zwrócony kod 200 do klienta, jeśli nie to kod 400.

Zadanie 46 -------------------------------------

Klient (napisany w jezyku Python, niestety wrapper w Rubym nie ma zaimplementowanej jeszcze obsługi modułu AUTH)

import logging
import os
import sys
import shutil

import zmq
from generate import generate_keys, make_clean_dirs


def run():
    base_dir = os.path.dirname(__file__)
    client_dir = os.path.join(base_dir, 'client')
    keys_dir = os.path.join(client_dir, 'certificates')
    server_keys_dir = os.path.join(base_dir, 'server','certificates')
    server_keys_authorized = os.path.join(base_dir, 'server','authorized')

    make_clean_dirs([client_dir])
    generate_keys(client_dir)
    ctx = zmq.Context.instance()
    client = ctx.socket(zmq.REQ)
    authenticator_refresher = ctx.socket(zmq.PUSH)
    authenticator_refresher.connect("tcp://127.0.0.1:9010")

    if len(sys.argv) == 2:
        if sys.argv[1] == "--copy-id":
            shutil.copy(os.path.join(keys_dir,"id.key"),server_keys_authorized)
            authenticator_refresher.send(b"REFRESH")




    # We need two certificates, one for the client and one for
    # the server. The client must know the server's public key
    # to make a CURVE connection.
    client_secret_file = os.path.join(keys_dir, "id.key_secret")
    client_public, client_secret = zmq.auth.load_certificate(client_secret_file)
    client.curve_secretkey = client_secret
    client.curve_publickey = client_public

    server_public_file = os.path.join(server_keys_dir, "id.key")
    server_public, _ = zmq.auth.load_certificate(server_public_file)
    # The client must know the server's public key to make a CURVE connection.
    client.curve_serverkey = server_public
    client.connect('tcp://127.0.0.1:9000')


    client.send(b"hi")
    resp = client.recv()
    print(resp)
    if resp == b"hello":
        logging.info("Ironhouse test OK")
    else:
        logging.error("Ironhouse test FAIL")






if __name__ == '__main__':
    if zmq.zmq_version_info() < (4,0):
        raise RuntimeError("Security is not supported in libzmq version < 4.0. libzmq version {0}".format(zmq.zmq_version()))

    if '-v' in sys.argv:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(level=level, format="[%(levelname)s] %(message)s")

    run()

Serwer (napisany w jezyku Python):

#!/usr/bin/env python

import logging
import os
import sys
from generate import generate_keys, make_clean_dirs
import zmq
import zmq.auth
from zmq.auth.thread import ThreadAuthenticator


def run():
    ''' Run Ironhouse example '''

    # These directories are generated by the generate_keys script
    base_dir = os.path.dirname(__file__)
    server_dir = os.path.join(base_dir, 'server')
    key_dir = os.path.join(server_dir, 'certificates')
    authorized_keys = os.path.join(server_dir, 'authorized')

    make_clean_dirs([server_dir,authorized_keys])
    generate_keys(server_dir)


    ctx = zmq.Context.instance()
    # Start an authenticator for this context.
    auth = ThreadAuthenticator(ctx,'utf-8',logging.getLogger('dupa'))
    auth.start()
    auth.allow('127.0.0.1')
    # Tell authenticator to use the certificate in a directory
    authenticator_refresher = ctx.socket(zmq.PULL)
    authenticator_refresher.bind("tcp://*:9010")
    auth.configure_curve(domain='*', location=authorized_keys)

    server = ctx.socket(zmq.REP)
    server_secret_file = os.path.join(key_dir, "id.key_secret")
    server_public, server_secret = zmq.auth.load_certificate(server_secret_file)
    server.curve_secretkey = server_secret
    server.curve_publickey = server_public
    server.curve_server = True  # must come before bind
    server.bind('tcp://*:9000')

    authenticator_refresher.recv()
    auth.configure_curve(domain='*', location=authorized_keys)


    req = server.recv()
    print(req)
    if req == b"hi":
        server.send(b"hello")
    else:
        print("wrong request: " + req)


      
    # stop auth thread
    auth.stop()

if __name__ == '__main__':
    if zmq.zmq_version_info() < (4,0):
        raise RuntimeError("Security is not supported in libzmq version < 4.0. libzmq version {0}".format(zmq.zmq_version()))

    if '-v' in sys.argv:
        level = logging.DEBUG
    else:
        level = logging.INFO

    logging.basicConfig(level=level, format="[%(levelname)s] %(message)s")

    run()

/// wydruk
// nalezy najpierw odpalic serwer, potem klienta (z opcja --copy-id jesli autentykacja ma zostac zakonczona pomyslnie)
PL-MAC-C02XR105JHD2:46 mj$ python3 server.py -v
[DEBUG] Starting
[DEBUG] auth received API command b'ALLOW'
[DEBUG] Allowing 127.0.0.1
[DEBUG] auth received API command b'CURVE'
[DEBUG] Configure curve: *[server/authorized]
[DEBUG] auth received API command b'CURVE'
[DEBUG] Configure curve: *[server/authorized]
[DEBUG] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'
[DEBUG] PASSED (whitelist) address=127.0.0.1
[DEBUG] ALLOWED (CURVE) domain=* client_key=b'S&a/f9hv&xy2L&d5j$6M0!W+Y8.rh0=[*J(48tCb'
[DEBUG] ZAP reply code=b'200' text=b'OK'
[DEBUG] auth received API command b'TERMINATE'
b'hi'
PL-MAC-C02XR105JHD2:46 mj$ python3 client.py --copy-id
[INFO] Ironhouse test OK



PL-MAC-C02XR105JHD2:46 mj$ python3 server.py -v
[DEBUG] Starting
[DEBUG] auth received API command b'ALLOW'
[DEBUG] Allowing 127.0.0.1
[DEBUG] auth received API command b'CURVE'
[DEBUG] Configure curve: *[server/authorized]
[DEBUG] version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'
[DEBUG] PASSED (whitelist) address=127.0.0.1
[DEBUG] DENIED (CURVE) domain=* client_key=b'/pI9z{Iq2f&UyTiU(U>2m74qh-(UR]y@.zp-ahas'
[DEBUG] ZAP reply code=b'400' text=b'Unknown key'
PL-MAC-C02XR105JHD2:46 mj$ python3 client.py
[ERROR] Ironhouse test FAIL




